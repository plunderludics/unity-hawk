{
  "api/UnityHawk.BasicInputProvider.html": {
    "href": "api/UnityHawk.BasicInputProvider.html",
    "title": "Class BasicInputProvider | unity-hawk",
    "summary": "Class BasicInputProvider Namespace UnityHawk Assembly UnityHawk.dll public class BasicInputProvider : InputProvider Inheritance object InputProvider BasicInputProvider Inherited Members InputProvider.AddInputEvent(InputEvent) Constructors BasicInputProvider() public BasicInputProvider() Fields controls [HideIf(\"useControlsObject\")] public Controls controls Field Value Controls controlsObject [DisableIf(\"useDefaultControls\")] [ShowIf(\"useControlsObject\")] public ControlsObject controlsObject Field Value ControlsObject emulator public Emulator emulator Field Value Emulator useControlsObject [HideIf(\"useDefaultControls\")] public bool useControlsObject Field Value bool useDefaultControls public bool useDefaultControls Field Value bool Methods InputForFrame() public override List<InputEvent> InputForFrame() Returns List<InputEvent>"
  },
  "api/UnityHawk.Emulator.EmulatorStatus.html": {
    "href": "api/UnityHawk.Emulator.EmulatorStatus.html",
    "title": "Enum Emulator.EmulatorStatus | unity-hawk",
    "summary": "Enum Emulator.EmulatorStatus Namespace UnityHawk Assembly UnityHawk.dll the current status of the emulator public enum Emulator.EmulatorStatus"
  },
  "api/UnityHawk.Emulator.LuaCallback.html": {
    "href": "api/UnityHawk.Emulator.LuaCallback.html",
    "title": "Delegate Emulator.LuaCallback | unity-hawk",
    "summary": "Delegate Emulator.LuaCallback Namespace UnityHawk Assembly UnityHawk.dll delegate for registering lua callbacks public delegate string Emulator.LuaCallback(string arg) Parameters arg string delegate for registering lua callbacks Returns string delegate for registering lua callbacks Constructors LuaCallback(object, nint) public LuaCallback(object @object, nint method) Parameters object object method nint Methods BeginInvoke(string, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(string arg, AsyncCallback callback, object @object) Parameters arg string callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual string EndInvoke(IAsyncResult result) Parameters result IAsyncResult Returns string Invoke(string) public virtual string Invoke(string arg) Parameters arg string Returns string"
  },
  "api/UnityHawk.Emulator.html": {
    "href": "api/UnityHawk.Emulator.html",
    "title": "Class Emulator | unity-hawk",
    "summary": "Class Emulator Namespace UnityHawk Assembly UnityHawk.dll public class Emulator : MonoBehaviour Inheritance object Emulator Properties CurrentFrame frame index of latest received texture public int CurrentFrame { get; } Property Value int IsMuted if the emulator is muted public bool IsMuted { get; set; } Property Value bool IsPaused if the emulator is paused public bool IsPaused { get; set; } Property Value bool IsRunning is the emulator process running a game? public bool IsRunning { get; } Property Value bool IsStarted is the emulator process started? public bool IsStarted { get; } Property Value bool IsStarting is the emulator process currently starting up? public bool IsStarting { get; } Property Value bool SpeedPercent the emulator speed as a percentage public int SpeedPercent { get; set; } Property Value int Status the current status of the emulator public Emulator.EmulatorStatus Status { get; } Property Value Emulator.EmulatorStatus SystemId ID of the current emulator platform (e.g. \"N64\", \"PSX\", etc.) Returns null if emulator is not running. public string SystemId { get; } Property Value string Texture Currently displayed emulator texture. public Texture Texture { get; } Property Value Texture Remarks If emulator is not running but a savestate is set, will return the savestate preview texture Volume the emulator current volume public int Volume { get; set; } Property Value int Methods FrameAdvance() advances a frame on the emulator public void FrameAdvance() Freeze(long, int, string) Freezes an address in emulated memory public void Freeze(long address, int size, string domain = null) Parameters address long The address to freeze size int The size of the value to freeze (1-4 bytes) domain string The memory domain. If null, defaults to main memory. LoadRom(string) loads a rom from a given path public void LoadRom(string path) Parameters path string LoadRom(Rom) loads a rom from a Rom asset public void LoadRom(Rom rom) Parameters rom Rom LoadState(string) loads a state from a given path public void LoadState(string path) Parameters path string LoadState(Savestate) loads a state from a Savestate asset public void LoadState(Savestate sample) Parameters sample Savestate Mute() mutes the emulator (and disables sound engine) public void Mute() OnDestroy() public void OnDestroy() OnDisable() public void OnDisable() OnEnable() public void OnEnable() OnValidate() public void OnValidate() Pause() pauses the emulator public void Pause() RegisterLuaCallback(string, LuaCallback) Register a callback that can be called via unityhawk.callmethod('MethodName', argString) in BizHawk lua public void RegisterLuaCallback(string methodName, Emulator.LuaCallback luaCallback) Parameters methodName string The name of the method to register luaCallback Emulator.LuaCallback The Unity-side callback RegisterMethod(string, LuaCallback) [Obsolete: use RegisterLuaCallback instead] Register a callback that can be called via unityhawk.callmethod('MethodName') in BizHawk lua [Obsolete(\"use RegisterLuaCallback instead\")] public void RegisterMethod(string methodName, Emulator.LuaCallback luaCallback) Parameters methodName string luaCallback Emulator.LuaCallback ReloadState() reloads the current state public void ReloadState() Restart() restarts the emulator [Button(null, EButtonEnableMode.Always)] public void Restart() SaveState(string) saves a state to a given path public string SaveState(string path) Parameters path string Returns string SetSpeedPercent(int) sets the speed of the emulator as integer percentage public void SetSpeedPercent(int percent) Parameters percent int Remarks This is the 'target' speed for the emulator - in reality might be slower if cpu-constrained SetVolume(int) sets the emulator volume public void SetVolume(int value) Parameters value int Unfreeze(long, int, string) Unfreezes an address that was previously frozen public void Unfreeze(long address, int size, string domain = null) Parameters address long The address to unfreeze size int The size of the value to unfreeze (1-4 bytes) domain string The memory domain. If null, defaults to main memory. Unmute() unmutes the emulator (and enables sound engine) public void Unmute() Unpause() unpauses the emulator public void Unpause() Unwatch(int) Unwatch a value that was previously watched public void Unwatch(int id) Parameters id int The id of the watch to stop Update() public void Update() WatchFloat(long, bool, string, Action<float>) Watch a float value in emulated memory at a given address public int WatchFloat(long address, bool isBigEndian, string domain, Action<float> onChanged) Parameters address long The address to watch isBigEndian bool Whether the value is big endian domain string The domain to watch. If null, defaults to main memory. onChanged Action<float> The callback to call when the value changes Returns int The id of the watch, can be used with Unwatch(id) to stop watching WatchSigned(long, int, bool, string, Action<int>) Watch a signed integer value in emulated memory at a given address public int WatchSigned(long address, int size, bool isBigEndian, string domain, Action<int> onChanged) Parameters address long The address to watch size int The size of the value to watch isBigEndian bool Whether the value is big endian domain string The domain to watch. If null, defaults to main memory. onChanged Action<int> The callback to call when the value changes Returns int The id of the watch, can be used with Unwatch(id) to stop watching WatchUnsigned(long, int, bool, string, Action<uint>) Watch an unsigned integer value in emulated memory at a given address public int WatchUnsigned(long address, int size, bool isBigEndian, string domain, Action<uint> onChanged) Parameters address long The address to watch size int The size of the value to watch isBigEndian bool Whether the value is big endian domain string The domain to watch. If null, defaults to main memory. onChanged Action<uint> The callback to call when the value changes Returns int The id of the watch, can be used with Unwatch(id) to stop watching WriteFloat(long, float, bool, string) Sets a float value at a given address public void WriteFloat(long address, float value, bool isBigEndian, string domain = null) Parameters address long The address to write to value float The value to write isBigEndian bool Whether the value is big endian domain string The domain to write to. If null, defaults to main memory. Remarks Only sets the value for a single frame - to freeze the address, use Freeze WriteSigned(long, int, int, bool, string) Sets a signed integer value at a given address public void WriteSigned(long address, int value, int size, bool isBigEndian, string domain = null) Parameters address long The address to write to value int The value to write size int The size of the value to write isBigEndian bool Whether the value is big endian domain string The domain to write to. If null, defaults to main memory. Remarks Only sets the value for a single frame - to freeze the address, use Freeze WriteUnsigned(long, uint, int, bool, string) Sets an unsigned integer value at a given address public void WriteUnsigned(long address, uint value, int size, bool isBigEndian, string domain = null) Parameters address long The address to write to value uint The value to write size int The size of the value to write isBigEndian bool Whether the value is big endian domain string The domain to write to. If null, defaults to main memory. Remarks Only sets the value for a single frame - to freeze the address, use Freeze"
  },
  "api/UnityHawk.InputEvent.html": {
    "href": "api/UnityHawk.InputEvent.html",
    "title": "Struct InputEvent | unity-hawk",
    "summary": "Struct InputEvent Namespace UnityHawk Assembly UnityHawk.dll public struct InputEvent Constructors InputEvent(string, int, Controller, bool) public InputEvent(string name, int value, Controller controller = Controller.P1, bool isAnalog = false) Parameters name string value int controller Controller isAnalog bool Fields controller public Controller controller Field Value Controller isAnalog public bool isAnalog Field Value bool name public string name Field Value string value public int value Field Value int Methods ToString() public override string ToString() Returns string"
  },
  "api/UnityHawk.InputProvider.html": {
    "href": "api/UnityHawk.InputProvider.html",
    "title": "Class InputProvider | unity-hawk",
    "summary": "Class InputProvider Namespace UnityHawk Assembly UnityHawk.dll public abstract class InputProvider : MonoBehaviour Inheritance object InputProvider Derived BasicInputProvider Constructors InputProvider() protected InputProvider() Methods AddInputEvent(InputEvent) public void AddInputEvent(InputEvent ie) Parameters ie InputEvent InputForFrame() public virtual List<InputEvent> InputForFrame() Returns List<InputEvent>"
  },
  "api/UnityHawk.html": {
    "href": "api/UnityHawk.html",
    "title": "Namespace UnityHawk | unity-hawk",
    "summary": "Namespace UnityHawk Classes BasicInputProvider Emulator InputProvider Structs InputEvent Enums Emulator.EmulatorStatus the current status of the emulator Delegates Emulator.LuaCallback delegate for registering lua callbacks"
  },
  "index.html": {
    "href": "index.html",
    "title": "",
    "summary": ""
  }
}